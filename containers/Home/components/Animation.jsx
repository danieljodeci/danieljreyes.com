import React, {Component} from 'react'
import Anime from 'react-anime'
import styles from '../styles/animation';
import {primary, secondary, tertiary} from '../../../hocs/Page/styles/colors';

export default class Animation extends Component {
  shouldComponentUpdate(nextProps, nextState){
    // Prevent Anime from rerendering animation
    return false;
  }
  render(){
    return (
      <span>
        <svg version="1.1" 
          xmlns="http://www.w3.org/2000/svg"  
          x="0px" 
          y="0px" 
          width="600px"
          height="500px"
          viewBox="0 0 545.1 289.2"
        >

          <defs>
            <linearGradient id="MyGradient">
              <stop offset="5%" stopColor={secondary.neutral} />
              <stop offset="95%" stopColor={secondary.dark} />
            </linearGradient>
          </defs>

          <Anime easing="easeInOutSine"
            duration={1000}
            direction="normal"
            complete={a => {
              if(a.direction == 'reverse') {
                a.direction = "normal"
              }else{
                a.direction = "reverse"
              }
              a.restart()
              this.props.onComplete()
            }}
            delay={(el, index) => index * 400}
            strokeDashoffset={ (el) => {
              var pathLength = 0;
              if (el.getTotalLength) {
                pathLength = el.getTotalLength();
                el.setAttribute('stroke-dasharray', pathLength);
              }
              return [pathLength, 0];
              }}
            >
            <path className="path" d="M265.13,367.29l18.75-106.2h27.9a68.34,68.34,0,0,1,20.1,2.85A46.38,46.38,0,0,1,348,272.41a40,40,0,0,1,10.73,13.8,42.89,42.89,0,0,1,3.9,18.68q0,16.5-5.55,28.27a54.07,54.07,0,0,1-14.93,19.35,61.39,61.39,0,0,1-21.9,11.18,95.36,95.36,0,0,1-26.47,3.6Zm21.6-103.2-17.55,100.2h24.45A94.34,94.34,0,0,0,318.9,361a58.4,58.4,0,0,0,20.93-10.43,50,50,0,0,0,14.25-18.3q5.25-11.17,5.25-26.92a40.94,40.94,0,0,0-3.68-17.78,36.62,36.62,0,0,0-10-12.9,44.39,44.39,0,0,0-15.22-7.87,65.51,65.51,0,0,0-19.2-2.7Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M451.13,367.29l-5.4-30.45h-60l-19.35,30.45h-4.05l68.25-106.2h4.95l18.9,106.2Zm-18.45-103.8-45.15,70.65h57.75Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M548.48,367.29l-54-102.45H494L476,367.29h-3.3l18.75-106.2h4.65l54.15,102.3h.45l18-102.3H572l-18.75,106.2Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M585.08,367.29l18.75-106.2h3.3l-18.75,106.2Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M620.17,367.29l18.75-106.2h59l-.6,3H641.47l-8.24,46.65h53.69l-.45,3h-53.7l-8.85,50.55h60.3l-.6,3Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M706.57,367.29l18.75-106.2h3.3l-18.15,103.2h52.8l-.6,3Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M289,531.54a32.79,32.79,0,0,1-6.23,10,25.42,25.42,0,0,1-9.15,6.3A32.53,32.53,0,0,1,261.23,550q-9.45,0-15.53-4.88a22,22,0,0,1-7.87-11.77l3-1.35a20.14,20.14,0,0,0,7.5,10.87,21.51,21.51,0,0,0,13.2,4.13,27.32,27.32,0,0,0,11.17-2.1,23.29,23.29,0,0,0,8.1-5.93,30.47,30.47,0,0,0,5.48-9.22,65.94,65.94,0,0,0,3.3-11.85l13.5-76.8h3.3l-13.65,77.25A66.37,66.37,0,0,1,289,531.54Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M322.43,503a71.34,71.34,0,0,1,4.27-24.53,64.06,64.06,0,0,1,12.23-20.77,59,59,0,0,1,19.2-14.33,57.82,57.82,0,0,1,25.05-5.32,56.31,56.31,0,0,1,21,3.6,40.12,40.12,0,0,1,14.92,10.05A41.78,41.78,0,0,1,428,466.89a58.48,58.48,0,0,1,2.93,18.75,70.69,70.69,0,0,1-4.28,24.45,64.05,64.05,0,0,1-12.15,20.62A58.45,58.45,0,0,1,395.33,545a57.82,57.82,0,0,1-25.05,5.33,56.31,56.31,0,0,1-21-3.6,41.8,41.8,0,0,1-15-9.9,39.88,39.88,0,0,1-8.93-14.93A58.25,58.25,0,0,1,322.43,503Zm105.15-17.4A56.36,56.36,0,0,0,425,468.31a37.92,37.92,0,0,0-8.1-14.17A38.74,38.74,0,0,0,403,444.61a50.94,50.94,0,0,0-19.8-3.52,53.16,53.16,0,0,0-23.55,5.17,56.44,56.44,0,0,0-18.15,13.8,63.27,63.27,0,0,0-11.63,19.8A66.42,66.42,0,0,0,325.73,503a54,54,0,0,0,2.7,17.32,39,39,0,0,0,8.17,14,38,38,0,0,0,13.88,9.45,51.92,51.92,0,0,0,19.8,3.45,53.31,53.31,0,0,0,23.47-5.1,56.28,56.28,0,0,0,18.08-13.65,62.35,62.35,0,0,0,11.62-19.73A66.38,66.38,0,0,0,427.58,485.64Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M449.63,547.29l18.75-106.2h27.9a68.34,68.34,0,0,1,20.1,2.85,46.38,46.38,0,0,1,16.12,8.47,40,40,0,0,1,10.73,13.8,42.89,42.89,0,0,1,3.9,18.68q0,16.5-5.55,28.27a54.07,54.07,0,0,1-14.93,19.35,61.39,61.39,0,0,1-21.9,11.18,95.36,95.36,0,0,1-26.47,3.6Zm21.6-103.2-17.55,100.2h24.45A94.34,94.34,0,0,0,503.4,541a58.4,58.4,0,0,0,20.93-10.43,50,50,0,0,0,14.25-18.3q5.25-11.17,5.25-26.92a40.94,40.94,0,0,0-3.68-17.78,36.62,36.62,0,0,0-10-12.9,44.39,44.39,0,0,0-15.22-7.87,65.51,65.51,0,0,0-19.2-2.7Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M565.88,547.29l18.75-106.2h59l-.6,3h-55.8l-8.25,46.65h53.7l-.45,3h-53.7l-8.85,50.55h60.3l-.6,3Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M739.12,536.49a52,52,0,0,1-17,10.42,54.62,54.62,0,0,1-19,3.38,57.87,57.87,0,0,1-20.92-3.45,38.39,38.39,0,0,1-23.48-24.38,57.28,57.28,0,0,1-2.85-18.37,68.52,68.52,0,0,1,17.63-45.9,63.61,63.61,0,0,1,19.72-14.63,56.76,56.76,0,0,1,24.9-5.47,58.83,58.83,0,0,1,9.83.82,45.54,45.54,0,0,1,9.22,2.55,39.72,39.72,0,0,1,8,4.28,29.09,29.09,0,0,1,6.37,6l-2.4,2.4a27.82,27.82,0,0,0-6.07-5.78,37.47,37.47,0,0,0-7.65-4.12,41.58,41.58,0,0,0-8.63-2.4,53.77,53.77,0,0,0-8.85-.75,52.81,52.81,0,0,0-23.4,5.25,60.72,60.72,0,0,0-18.67,14,64.78,64.78,0,0,0-12.3,19.95,63,63,0,0,0-4.43,23.25,55.68,55.68,0,0,0,2.55,17.1,37.16,37.16,0,0,0,7.95,13.87,37.84,37.84,0,0,0,13.65,9.38q8.25,3.45,19.65,3.45A52.2,52.2,0,0,0,721.2,544a50.72,50.72,0,0,0,16.42-10Z" transform="translate(-237.83 -261.09)"/><path className="path" d="M760.87,547.29l18.75-106.2h3.3l-18.75,106.2Z" transform="translate(-237.83 -261.09)"/>
          </Anime>
        </svg>

        <style jsx>{styles}</style>
      </span>
    )
  }
}

Animation.defaultProps = {
  onComplete: () => null
}